"use client"
export const dynamic = "force-dynamic"

import { useEffect, useState } from "react"
import { createClient } from "@/lib/supabase/client"
import { Button } from "@/components/ui/button"
import { TEACHERS } from "@/lib/teachers"

type Request = {
  id: string
  user_id: string | null
  course: string
  name: string
  email: string
  phone: string
  created_at: string
}

export default function AdminRequestsPage() {
  const supabase = createClient()
  const [requests, setRequests] = useState<Request[]>([])
  const [isApproved, setIsApproved] = useState(false)
  const [selectedRequest, setSelectedRequest] = useState<Request | null>(null)

  const [zoomLink, setZoomLink] = useState("")
  const [selectedDate, setSelectedDate] = useState("")
  const [selectedTime, setSelectedTime] = useState("")
  const [selectedTeacher, setSelectedTeacher] = useState("")

  const [toastMessage, setToastMessage] = useState<string | null>(null)
  const [userNotification, setUserNotification] = useState<string | null>(null)

  useEffect(() => {
    const fetchRequests = async () => {
      const { data, error } = await supabase
        .from("course_signup_requests")
        .select("*")
        .eq("status", "pending")
        .order("created_at", { ascending: true })

      if (error) console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫:", error)
      else setRequests(data)
    }

    fetchRequests()
  }, [])

  const handleApprove = (request: Request) => {
    setSelectedRequest(request)
    setIsApproved(true)
  }

  const handleReject = async (id: string) => {
    await supabase
      .from("course_signup_requests")
      .update({ status: "rejected" })
      .eq("id", id)

    setRequests((prev) => prev.filter((r) => r.id !== id))
    setIsApproved(false)
    setSelectedRequest(null)
  }

  const handleSendMaterials = async () => {
    console.log("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏...")

    if (!selectedRequest?.user_id || !selectedRequest.course) {
      alert("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏")
      return
    }

    const { data: courseData, error: courseError } = await supabase
      .from("courses")
      .select("id")
      .eq("slug", selectedRequest.course.trim())

    if (courseError || !courseData || courseData.length === 0) {
      console.error("–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω:", courseError)
      alert("–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
      return
    }

    const courseId = courseData[0].id

    
    const { count: totalLessons, error: lessonsError } = await supabase
      .from("lessons")
      .select("id", { count: "exact", head: true })
      .eq("course_id", courseId)

      if (lessonsError) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ —É—Ä–æ–∫–æ–≤:", lessonsError)
        alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—Ä–æ–∫–æ–≤")
        return
      }

const { error: insertUserCourseError } = await supabase.from("user_courses").insert({
  user_id: selectedRequest.user_id,
  course_id: courseId,
  progress: 0,
  lessons_completed: 0,
  total_lessons: totalLessons || 0,
})


    if (insertUserCourseError) {
      console.error("–û—à–∏–±–∫–∞ user_courses:", insertUserCourseError)
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–∞")
      return
    }

    const { error: insertScheduleError } = await supabase.from("schedules").insert({
      user_id: selectedRequest.user_id,
      course_id: courseId,
      lesson_id: null,
      zoom_link: zoomLink,
      date: selectedDate,
      time: selectedTime,
      teacher_name: selectedTeacher || "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å",
      is_deadline: false,
    })

    if (insertScheduleError) {
      console.error("–û—à–∏–±–∫–∞ schedules:", insertScheduleError)
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
      return
    }

    const { error: deleteError } = await supabase
      .from("course_signup_requests")
      .delete()
      .eq("id", selectedRequest.id)

    if (deleteError) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏:", deleteError)
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏")
      return
    }

    setRequests((prev) => prev.filter((r) => r.id !== selectedRequest.id))
    setToastMessage("–ú–∞—Ç–µ—Ä–∏–∞–ª—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
    setUserNotification("–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞, –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")

    // –°–±—Ä–æ—Å
    setZoomLink("")
    setSelectedDate("")
    setSelectedTime("")
    setSelectedTeacher("")
    setIsApproved(false)
    setSelectedRequest(null)

    setTimeout(() => setToastMessage(null), 3000)
  }

  return (
    <div className="p-8 max-w-4xl mx-auto">
      <h1 className="text-2xl font-bold mb-6">–ó–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–ø–∏—Å—å</h1>

      {requests.length === 0 ? (
        <p className="text-gray-500">–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫.</p>
      ) : (
        <div className="space-y-6">
          {requests.map((r) => (
            <div key={r.id} className="p-4 border rounded-lg shadow-sm">
              <p><strong>–ö—É—Ä—Å (slug):</strong> {r.course}</p>
              <p><strong>–ò–º—è:</strong> {r.name}</p>
              <p><strong>Email:</strong> {r.email}</p>
              {r.phone && <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> {r.phone}</p>}
              <div className="mt-4 flex gap-4">
                <Button onClick={() => handleApprove(r)} className="bg-green-600 hover:bg-green-700">‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</Button>
                <Button variant="destructive" onClick={() => handleReject(r.id)}>‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å</Button>
              </div>
            </div>
          ))}
        </div>
      )}

      {isApproved && selectedRequest && (
        <div className="mt-6 p-4 border rounded-lg bg-gray-50">
          <h3 className="text-xl font-bold mb-4">–û—Ç–ø—Ä–∞–≤–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤</h3>

          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium">–°—Å—ã–ª–∫–∞ –Ω–∞ Zoom:</label>
              <input
                type="text"
                value={zoomLink}
                onChange={(e) => setZoomLink(e.target.value)}
                className="w-full p-2 border rounded-md"
              />
            </div>

            <div>
              <label className="block text-sm font-medium">–î–∞—Ç–∞:</label>
              <input
                type="date"
                value={selectedDate}
                onChange={(e) => setSelectedDate(e.target.value)}
                className="w-full p-2 border rounded-md"
              />
            </div>

            <div>
              <label className="block text-sm font-medium">–í—Ä–µ–º—è:</label>
              <input
                type="time"
                value={selectedTime}
                onChange={(e) => setSelectedTime(e.target.value)}
                className="w-full p-2 border rounded-md"
              />
            </div>

            <div>
              <label className="block text-sm font-medium">–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:</label>
              <select
                value={selectedTeacher}
                onChange={(e) => setSelectedTeacher(e.target.value)}
                className="w-full p-2 border rounded-md"
              >
                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è</option>
                {TEACHERS.map((t) => (
                  <option key={t} value={t}>{t}</option>
                ))}
              </select>
            </div>

            <Button onClick={handleSendMaterials} className="bg-primary hover:bg-primary/90">
              üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã
            </Button>
          </div>
        </div>
      )}

      {toastMessage && (
        <div className="mt-4 p-4 bg-green-600 text-white rounded-lg">
          <p>{toastMessage}</p>
        </div>
      )}

      {userNotification && (
        <div className="mt-4 p-4 bg-blue-600 text-white rounded-lg">
          <p>{userNotification}</p>
        </div>
      )}
    </div>
  )
}
